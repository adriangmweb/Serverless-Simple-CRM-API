service: serverless-simple-crm-api

plugins:
  - serverless-dotenv-plugin
custom:
  dotenv:
    logging: false
    include:
      - LOG_LEVEL

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:provider.custom.config.${self:provider.stage}.region}
  stage: ${opt:stage, "dev"}
  profile: ${env:AWS_PROFILE}
  timeout: 30
  environment:
    NODE_ENV: ${opt:stage, "dev"}
    MYSQL_DATABASE: ${env:MYSQL_DATABASE}
    MYSQL_USER: ${env:MYSQL_USER}
    MYSQL_PASSWORD: ${env:MYSQL_PASSWORD}
    MYSQL_HOST: ${env:MYSQL_HOST}
  custom:
    prefix: ${self:provider.stage}-crm-api
    description: "Simple CRM Serverless API"
    config:
      dev:
        region: eu-west-1

package:
  individually: true
  exclude:
    - ./**
  include:
    - config/*
    - database/models/*
    - lib/*
    - helpers/*
    - services/*

layers:
  APINodeModules:
    compatibleRuntimes:
      - nodejs
    path: layers/api
    package:
      include:
        - ./**
    name: ${self:provider.custom.prefix}-node_modules
    description: Layer including CRM API production node modules

functions:
  adminAuthorizer:
    handler: api/auth/handler.adminAuth
    description: Authorizer function for admins
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    environment:
      JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    package:
      include:
        - api/auth/**
      exclude:
        - /**
  userAuthorizer:
    handler: api/auth/handler.auth
    description: Authorizer function for logged users
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    environment:
      JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    package:
      include:
        - api/auth/**
      exclude:
        - /**
  login:
    handler: api/auth/handler.login
    description: Login function
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    environment:
      JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    package:
      include:
        - api/auth/**
    events:
      - http:
          path: login
          method: post
  createUser:
    handler: api/users/handler.create
    description: "Creates a new user"
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    package:
      include:
        - api/users/**
    events:
      - http:
          path: users/create
          method: post
          authorizer:
            name: adminAuthorizer
            resultTtlInSeconds: 0
  getUser:
    handler: api/users/handler.get
    description: "Gets a single user"
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    package:
      include:
        - api/users/**
    events:
      - http:
          path: user/{userId}
          method: get
          authorizer:
            name: adminAuthorizer
            resultTtlInSeconds: 0
  removeUser:
    handler: api/users/handler.remove
    description: "Removes a single user"
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    package:
      include:
        - api/users/**
    events:
      - http:
          path: users/remove
          method: post
          authorizer:
            name: adminAuthorizer
            resultTtlInSeconds: 0
  updateUser:
    handler: api/users/handler.update
    description: "Updates a single user"
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    package:
      include:
        - api/users/**
    events:
      - http:
          path: users/update
          method: post
          authorizer:
            name: adminAuthorizer
            resultTtlInSeconds: 0
  listUsers:
    handler: api/users/handler.list
    description: "List all users"
    layers:
      - { Ref: APINodeModulesLambdaLayer }
    package:
      include:
        - api/users/**
    events:
      - http:
          path: users
          method: get
          authorizer:
            name: adminAuthorizer
            resultTtlInSeconds: 0
